enum Context {
  GLOBAL

  LOCAL

  NEIGHBORHOOD
}

"""
The simulation environment
"""
type EnvironmentSurrogate {
  dimensions: Int!

  """
  Clone the node associated with the given id to the specified position
  """
  cloneNode(nodeId: Int!, position: PositionInput!, time: Float!): NodeSurrogate

  """
  The layer associated with the molecule represented by the given MoleculeInput
  """
  getLayer(m: MoleculeInput!): LayerSurrogate

  """
  The neighborhood of the node with the given id
  """
  getNeighborhood(nodeId: Int!): NeighborhoodSurrogate!

  """
  The layers in this environment
  """
  layers: [LayerSurrogate!]!

  """
  The node with the given id
  """
  nodeById(id: Int!): NodeSurrogate!

  """
  A list of entries NodeId-Position
  """
  nodeToPos: NodeToPosMap!

  """
  The nodes in this environment
  """
  nodes: [NodeSurrogate!]!
}

"""
A generic position in space
"""
type GenericPositionSurrogate implements PositionSurrogate {
  coordinates: [Float!]!

  dimensions: Int!
}

"""
A layer containing a substance or a molecule with a spatial distribution
"""
type LayerSurrogate {
  """
  Returns the value of the layer at the given position
  """
  getValue(p: PositionInput!): String!
}

"""
A molecule with an associated name, used as input object
"""
input MoleculeInput {
  name: String!
}

"""
A molecule with an associated name
"""
type MoleculeSurrogate {
  name: String!
}

"""
A pair Molecule-Concentration
"""
type MoleculeToConcentrationEntry {
  concentration: String!

  molecule: MoleculeSurrogate!
}

"""
A map storing molecules and their concentrations
"""
type MoleculeToConcentrationMap {
  size: Int!

  """
  The list of pairs Molecule-Concentration
  """
  entries: [MoleculeToConcentrationEntry!]!
}

type Mutation {
  """
  Pause the simulation
  """
  pause: String!

  """
  Play the simulation
  """
  play: String!

  """
  Terminate the simulation
  """
  terminate: String!
}

"""
A neighborhood of nodes
"""
type NeighborhoodSurrogate {
  size: Int!

  """
  The central node of this neighborhood
  """
  getCenter: NodeSurrogate!

  """
  The list of the neighbors
  """
  getNeighbors: [NodeSurrogate!]!

  """
  Whether this neighborhood is empty
  """
  isEmpty: Boolean!
}

"""
A node in the environment
"""
type NodeSurrogate {
  id: Int!

  moleculeCount: Int!

  """
  Whether the given molecule is present
  """
  contains(molecule: MoleculeInput!): Boolean!

  """
  List of Molecule-Concentration pairs
  """
  contents: MoleculeToConcentrationMap!

  """
  The concentration of the given molecule
  """
  getConcentration(molecule: MoleculeInput!): String

  """
  The list of properties/capabilities of this node as a string
  """
  properties: [String!]!

  """
  The list of reactions of this node
  """
  reactions: [ReactionSurrogate!]!
}

"""
The pair NodeId-Position
"""
type NodeToPosEntry {
  id: Int!

  position: PositionSurrogate!
}

"""
Map of nodes' ids and their position
"""
type NodeToPosMap {
  size: Int!

  """
  The list of pairs NodeId-Position
  """
  entries: [NodeToPosEntry!]!
}

"""
A position in a two dimensional space
"""
type Position2DSurrogate implements PositionSurrogate {
  coordinates: [Float!]!

  dimensions: Int!

  x: Float!

  y: Float!
}

"""
Position in space, used as input parameter
"""
input PositionInput {
  coordinates: [Float!]!

  dimensions: Int!
}

"""
Generic position in space
"""
interface PositionSurrogate {
  coordinates: [Float!]!

  dimensions: Int!
}

type Query {
  """
  The actual state of the environment
  """
  environment: EnvironmentSurrogate!

  """
  The status of the simulation
  """
  simulationStatus: String!

  """
  The neighborhood which the given node is the center.
  """
  neighborhood(nodeId: Int!): NeighborhoodSurrogate!

  """
  The position in space of the given node.
  """
  nodePosition(nodeId: Int!): PositionSurrogate
}

"""
A generic reaction
"""
type ReactionSurrogate {
  inputContext: Context!

  node: NodeSurrogate!

  outputContext: Context!
}

type Subscription {
  """
  The simulation's environment
  """
  environment: EnvironmentSurrogate!

  """
  The neighborhood of a node in the simulation's environment
  """
  neighborhood(nodeId: Int!): NeighborhoodSurrogate!

  """
  A node in the simulation's environment
  """
  node(nodeId: Int!): NodeSurrogate!
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __Directive {
  """
  The __Directive type represents a Directive that a server supports.
  """
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
An enum describing valid locations where a directive can be placed
"""
enum __DirectiveLocation {
  """
  Indicates the directive is valid on queries.
  """
  QUERY

  """
  Indicates the directive is valid on mutations.
  """
  MUTATION

  """
  Indicates the directive is valid on subscriptions.
  """
  SUBSCRIPTION

  """
  Indicates the directive is valid on fields.
  """
  FIELD

  """
  Indicates the directive is valid on fragment definitions.
  """
  FRAGMENT_DEFINITION

  """
  Indicates the directive is valid on fragment spreads.
  """
  FRAGMENT_SPREAD

  """
  Indicates the directive is valid on inline fragments.
  """
  INLINE_FRAGMENT

  """
  Indicates the directive is valid on variable definitions.
  """
  VARIABLE_DEFINITION

  """
  Indicates the directive is valid on a schema SDL definition.
  """
  SCHEMA

  """
  Indicates the directive is valid on a scalar SDL definition.
  """
  SCALAR

  """
  Indicates the directive is valid on an object SDL definition.
  """
  OBJECT

  """
  Indicates the directive is valid on a field SDL definition.
  """
  FIELD_DEFINITION

  """
  Indicates the directive is valid on a field argument SDL definition.
  """
  ARGUMENT_DEFINITION

  """
  Indicates the directive is valid on an interface SDL definition.
  """
  INTERFACE

  """
  Indicates the directive is valid on an union SDL definition.
  """
  UNION

  """
  Indicates the directive is valid on an enum SDL definition.
  """
  ENUM

  """
  Indicates the directive is valid on an enum value SDL definition.
  """
  ENUM_VALUE

  """
  Indicates the directive is valid on an input object SDL definition.
  """
  INPUT_OBJECT

  """
  Indicates the directive is valid on an input object field SDL definition.
  """
  INPUT_FIELD_DEFINITION
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __InputValue {
  name: String!

  description: String

  type: __Type!

  defaultValue: String

  isDeprecated: Boolean

  deprecationReason: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
A GraphQL Introspection defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  'A list of all directives supported by this server.
  """
  directives: [__Directive!]!

  """
  'If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type

  specifiedByURL: String

  specifiedByUrl: String @deprecated(reason: "This legacy name has been replaced by `specifiedByURL`")
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
An enum describing what kind of type a given __Type is
"""
enum __TypeKind {
  """
  Indicates this type is a scalar. 'specifiedByURL' is a valid field
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
Directs the executor to include this field or fragment only when the `if` argument is true
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
Marks the field, argument, input field or enum value as deprecated
"""
directive @deprecated ("The reason for the deprecation" reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|ENUM_VALUE|INPUT_FIELD_DEFINITION

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
Exposes a URL that specifies the behaviour of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behaviour of this scalar." url: String!) on SCALAR

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
